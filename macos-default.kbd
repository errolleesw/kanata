(defcfg
  ;; For MacOS - no explicit input/output needed, Kanata will auto-detect
  process-unmapped-keys yes
  log-layer-changes yes
  danger-enable-cmd yes
)

(defsrc
  esc      f1      f2      f3      f4      f5      f6      f7      f8      f9      f10     f11     f12
  grv      1       2       3       4       5       6       7       8       9       0       -       =       bspc
  tab      q       w       e       r       t       y       u       i       o       p       [       ]       \
  caps     a       s       d       f       g       h       j       k       l       ;       '       ret
  lsft     z       x       c       v       b       n       m       ,       .       /       rsft
  fn       lctl    lalt    lmet                    spc                    rmet     ralt     left    down    up      rght
)

(defvar
  tap-timeout                 400
  holt-timeout-short          100
  hold-timeout-medium         200
  hold-timeout-long           300
  chord-timeout               30
  tt                          $tap-timeout
  hts                         $hold-timeout-short
  htm                         $hold-timeout-medium
  htl                         $hold-timeout-long
  ct                          $chord-timeout
)

(defvirtualkeys
  sym-off (macro f19)
)

(defalias
  ;; Multi-modifier outputs for LEFT HAND combinations
  ca      (multi lctl lalt)           ;; ctrl+alt
  cc      (multi lctl lmet)           ;; ctrl+cmd  
  cs      (multi lctl lsft)           ;; ctrl+shift
  ac      (multi lalt lmet)           ;; alt+cmd
  as      (multi lalt lsft)           ;; alt+shift
  mc      (multi lmet lsft)           ;; cmd+shift
  cac     (multi lctl lalt lmet)      ;; ctrl+alt+cmd
  cas     (multi lctl lalt lsft)      ;; ctrl+alt+shift
  ccs     (multi lctl lmet lsft)      ;; ctrl+cmd+shift
  acs     (multi lalt lmet lsft)      ;; alt+cmd+shift
  hyper   (multi lctl lalt lmet lsft) ;; all four (hyper)

  ;; Multi-modifier outputs for RIGHT HAND combinations
  rsc     (multi rsft rmet)           ;; right shift+cmd (u+i)
  rsa     (multi rsft ralt)           ;; right shift+alt (u+o)
  rsh     (multi rsft rctl)           ;; right shift+ctrl (u+p)
  rmc     (multi rmet ralt)           ;; right cmd+alt (i+o)
  rmh     (multi rmet rctl)           ;; right cmd+ctrl (i+p)
  rah     (multi ralt rctl)           ;; right alt+ctrl (o+p)
  rsmc    (multi rsft rmet ralt)      ;; right shift+cmd+alt (u+i+o)
  rsmh    (multi rsft rmet rctl)      ;; right shift+cmd+ctrl (u+i+p)
  rsah    (multi rsft ralt rctl)      ;; right shift+alt+ctrl (u+o+p)
  rmah    (multi rmet ralt rctl)      ;; right cmd+alt+ctrl (i+o+p)
  rhyper  (multi rsft rmet ralt rctl) ;; all four right mods (u+i+o+p)

  ;; LEFT HAND Chord aliases WITH tap-hold behavior
  chq     (tap-hold-except-keys $tt $htm (chord qwer-group q) lctl (q w e r t a s d f g z x c v b))
  chw     (tap-hold-except-keys $tt $htm (chord qwer-group w) lalt (q w e r t a s d f g z x c v b))
  che     (tap-hold-except-keys $tt $htm (chord qwer-group e) lmet (q w e r t a s d f g z x c v b))
  chr     (tap-hold-except-keys $tt $htm (chord qwer-group r) lsft (q w e r t a s d f g z x c v b))

  ;; RIGHT HAND Chord aliases WITH tap-hold behavior
  chu     (tap-hold-except-keys $tt $htm (chord uiop[-group u) rsft (y u i o p h j k l ; n m , .))
  chi     (tap-hold-except-keys $tt $htm (chord uiop[-group i) rmet (y u i o p h j k l ; n m , .))
  cho     (tap-hold-except-keys $tt $htm (chord uiop[-group o) ralt (y u i o p h j k l ; n m , .))
  chp     (tap-hold-except-keys $tt $htm (chord uiop[-group p) rctl (y u i o p h j k l ; n m , .))
  ch[     (chord uiop[-group [) ;; p+[ = forward delete  
  
  ;; Special keys
  hyp    (tap-hold $tt $htm esc (multi lctl lsft)) ;; Hyper key
  ;; tab    (tap-hold $tt $htm tab (layer-while-held sym)) ;; Tab activates sym layer

  ;; layer switching exmaples that calls hammerspoon macros to bring up HUD.
  tab (tap-hold $tt $htm
        tab
        (multi
          (macro f20)                 ;; tell Hammerspoon: sym on
          (layer-while-held sym)
          (on-release tap-vkey sym-off) ;; tell Hammerspoon: base on release
        ))

  ;; tab (tap-hold $tt $htm
  ;;     tab
  ;;     (multi
  ;;       (macro f20)          ;; tell Hammerspoon: show HUD
  ;;       (layer-switch sym))) ;; switch permanently to sym

  grv    (tap-hold $tt $htm grv (layer-while-held service)) ;; Grave activates service layer
  rcm    (tap-hold $tt $htm ret (layer-while-held navigation)) ;; Right cmd activates navigation layer
  fdel   del ;; Forward delete (del) key
  obrk   (tap-hold $tt $htl 9 (macro [ [)) ;; tap-hold for open bracket [[ key for Obsidian.
  pipe   (tap-hold $tt $htm - S-\) ;; tap-hold for pipe (|) key
  
  exit (multi
            (macro f19)          ;; tell Hammerspoon: hide HUD
            (layer-switch default)) ;; change 'base' to your actual base layer name
  
  ;; Disabled keys
  xx     XX
)

;; LEFT HAND chord group
(defchords qwer-group $ct
  ;; Single keys
  (q      ) q           ;; single q = type q
  (  w    ) w           ;; single w = type w  
  (    e  ) e           ;; single e = type e
  (      r) r           ;; single r = type r
  
  ;; Two-key combinations
  (q w    ) @ca         ;; q+w = ctrl+alt
  (q   e  ) @cc         ;; q+e = ctrl+cmd
  (q     r) @cs         ;; q+r = ctrl+shift
  (  w e  ) @ac         ;; w+e = alt+cmd
  (  w   r) @as         ;; w+r = alt+shift
  (    e r) @mc         ;; e+r = cmd+shift
  
  ;; Three-key combinations
  (q w e  ) @cac        ;; q+w+e = ctrl+alt+cmd
  (q w   r) @cas        ;; q+w+r = ctrl+alt+shift
  (q   e r) @ccs        ;; q+e+r = ctrl+cmd+shift
  (  w e r) @acs        ;; w+e+r = alt+cmd+shift
  
  ;; Four-key combination (hyper)
  (q w e r) @hyper      ;; q+w+e+r = all modifiers
)

;; RIGHT HAND chord group
(defchords uiop[-group $ct
  ;; Single keys
  (u      ) u           ;; single u = type u
  (  i    ) i           ;; single i = type i  
  (    o  ) o           ;; single o = type o
  (      p) p           ;; single p = type p
  (        [) bspc      ;; single [ = backspace (bspc) 
  ;; Two-key combinations
  (u i    ) @rsc        ;; u+i = right shift+cmd
  (u   o  ) @rsa        ;; u+o = right shift+alt
  (u     p) @rsh        ;; u+p = right shift+ctrl
  (  i o  ) @rmc        ;; i+o = right cmd+alt
  (  i   p) @rmh        ;; i+p = right cmd+ctrl
  (    o p) @rah        ;; o+p = right alt+ctrl
  
  ;; Three-key combinations
  (u i o  ) @rsmc       ;; u+i+o = right shift+cmd+alt
  (u i   p) @rsmh       ;; u+i+p = right shift+cmd+ctrl
  (u   o p) @rsah       ;; u+o+p = right shift+alt+ctrl
  (  i o p) @rmah       ;; i+o+p = right cmd+alt+ctrl
  
  ;; Four-key combination (right hyper)
  (u i o p) @rhyper     ;; u+i+o+p = all right modifiers

  ;; Special Combinations
  (       p [) @fdel    ;; p+[ = forward delete
)

(deflayer default
  @xx      f1      f2      f3      f4      f5      f6      f7      f8      f9      f10     f11     f12
  @grv     1       2       3       4       5       6       7       8       @obrk   0       @pipe   @xx     @xx
  @tab     @chq    @chw    @che    @chr    t       y       @chu    @chi    @cho    @chp    @ch[    @xx     @xx
  @hyp     a       s       d       f       g       h       j       k       l       ;       '       @xx
  lsft     z       x       c       v       b       n       m       ,       .       /       rsft
  fn       @xx     @xx     lmet                    spc                    @rcm     @xx     left    down    up      rght
)

(deflayer navigation
  _        _       _       _       _       _       _       _       _       _       _       _       _
  _        _       _       _       _       _       _       _       _       _       _       _       _       _
  _        _       _       _       _       _       _       _       _       _       _       del     _       _
  _        _       _       _       _       _       left    down    up      rght    _       _       _
  _        _       _       _       _       _       _       pgup    pgdn       _       _       _
  _        _       _       _                        _                        _       _       _       _       _       _
)

(deflayer sym
  _        _       _       _       _       _       _       _       _       _       _       _       _
  _        _       _       _       _       _       _       _       _       [       ]       \       _       _
  @exit    _       _       _       _       _       _       _       _       _       _       _       _       _
  _        _       _       _       _       _       _       _       _       _       _       _       _
  _        _       _       _       _       _       _       _       -       =       _       _
  _        _       _       _                        _                        _       _       _       _       _       _
)

(deflayer service
  _        _       _       _       _       _       _       _       _       _       _       _       _
  _        _       _       _       _       _       _       _       _       _       _       _       _       _
  _        _       _       _       _       _       _       _       _       _       _       _       _       _
  _        _       _       _       _       _       _       _       lrld    _       _       _       _
  _        _       _       _       _       _       _       _       _       _       _       _
  _        _       _       _                       _                       _       _       _       _       _       _
)
;; use this as a template for new layers
(deflayer template 
  _        _       _       _       _       _       _       _       _       _       _       _       _
  _        _       _       _       _       _       _       _       _       _       _       _       _       _
  _        _       _       _       _       _       _       _       _       _       _       _       _       _
  _        _       _       _       _       _       _       _       _       _       _       _       _
  _        _       _       _       _       _       _       _       _       _       _       _
  _        _       _       _                       _                       _       _       _       _       _       _
)